[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/genesis/docs/intro","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Getting Started","url":"/genesis/docs/intro#example","content":"To get an example of usage you can view the demo place on Roblox. "},{"title":"1. Get the library​","type":1,"pageTitle":"Getting Started","url":"/genesis/docs/intro#1-get-the-library","content":"Wally PackageRoblox ModelOr build from source using Rojo "},{"title":"2. Prepare assets​","type":1,"pageTitle":"Getting Started","url":"/genesis/docs/intro#2-prepare-assets","content":"All assets need to be imported into a place and wrapped in a Model instance with the PrimaryPart property set accordingly. The rest is up to your personal preference. Keep in mind you can apply changes to all properties which can be changed at runtime using the PrefabConfig. This means you can have a single asset which can be used for multiple prefabs with varied effects, colors, materials, scaling, etc... "},{"title":"3. Prepare a config​","type":1,"pageTitle":"Getting Started","url":"/genesis/docs/intro#3-prepare-a-config","content":"tip This is a lengthy process. Use the demo place as a starting point. Reference the API to see what each property does and which types it supports. You can also use --!strict to get type checking in your IDE. "},{"title":"4. Create the map​","type":1,"pageTitle":"Getting Started","url":"/genesis/docs/intro#4-create-the-map","content":"Use the CreateMap method to create a map. "},{"title":"Genesis","type":0,"sectionRef":"#","url":"/genesis/api/Genesis","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#types","content":" "},{"title":"Perlin3DConfig​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#Perlin3DConfig","content":"&lt;/&gt; interface Perlin3DConfig { generator: &quot;Perlin3D&quot; terrain: { minDensity: number, frequency: number, verticalScale: number, outlineMinDensity: number, outlineFrequency: number, falloffStart: number, alternativeMaterialChance: number, noiseMaterialMinDensity: number, noiseMaterialFrequency: number, objectMaterialMinDensity: number, objectMaterialFrequency: number, objectProbeChance: number } material: { primaryMaterial: Enum.Material, alternativeMaterial: Enum.Material, noiseMaterial: Enum.Material, objectMaterial: Enum.Material, primaryMaterialColor: Color3 , alternativeMaterialColor: Color3 , noiseMaterialColor: Color3 , objectMaterialColor: Color3 } spikes: { chance: number, lengthMin: number, lengthMax: number, minGap: number, width: number } | nil prefabs: {[string]: PrefabConfig | nil} | nil objects: { primaryMaterial: { ceiling: {[string]: number}, side: {[string]: number}, floor: {[string]: number} }, alternativeMaterial: { ceiling: {[string]: number}, side: {[string]: number}, floor: {[string]: number} }, objectMaterial: { ceiling: {[string]: number}, side: {[string]: number}, floor: {[string]: number} } } | nil }   "},{"title":"PrefabConfig​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#PrefabConfig","content":"&lt;/&gt; interface PrefabConfig { clone: string | nil-- Clone the properties of an existing config and then apply any changes, works on multiple layers asset: string-- The name of the asset to use for this prefab rbxProperties: {[string]: {[string]: any} | nil} | nil-- Name of any child containing any property with any value proximity: { extraRadius: number | nil, banned: { bannedRadius: number, bannedList: {string} } | nil } | nil-- Checks if the prefab is within the banned radius of any other prefab in the banned list scale: NumberRange -- Applies random scaling to prefab between the min and max values randomRotation: boolean | nil-- Applies random Y axies rotation to prefab bury: boolean | nil-- Buries prefab into the ground useNormal: boolean | nil-- Makes prefab align with the normal of the surface it is placed on sound: {[string]: any} | nil-- Applies a sound to the prefab containing any property and any value decal: { faces: {Enum.NormalId}, [string]: any } | nil-- Applies the decal to the specified faces with any property and any value stretch: NumberRange | nil-- Stretches the model on the Y axies between the min and max values texture: { otherChildren: {string} | nil, faces: {Enum.NormalId}, [string]: any } | nil-- Applies a texture to the prefab on the PrimaryPart and specified otherChildren, on the specified faces with any property and any value }  "},{"title":"Properties​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#properties","content":" "},{"title":"UseFlatMaterials​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#UseFlatMaterials","content":"&lt;/&gt; Genesis.UseFlatMaterials: boolean True by default, if set to false you can apply your own material variants to the terrain. "},{"title":"Functions​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#functions","content":" "},{"title":"CreateMap​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#CreateMap","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Genesis:CreateMap( mapConfig: : MapConfig, assetContainer: : Folder ) → DebugStats "},{"title":"Types","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis##","content":""},{"title":"​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#MapConfig","content":"interface MapConfig { generatorConfig: Perlin3DConfig size: number seed: number | nil }  "},{"title":"​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#DebugStats","content":"interface DebugStats { time: { prepare: number, terrain: number, spikes: number, objectPoints: number, objectPrefabs: number, objectGeneration: number, total: number } total: { objectProbes: number, spikeProbes: number, spikes: number, objectPoints: number, objectPrefabs: number, objects: number } }   danger Only one map can be can exist at a time, calling this function will destroy the current map if it exists. Creates a new map based on the map config specified, also requires a folder instance that stores the prefabs used for object generation.  "},{"title":"DestroyMap​","type":1,"pageTitle":"Genesis","url":"/genesis/api/Genesis#DestroyMap","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Genesis:DestroyMap() → () Destroys the current map. "}]